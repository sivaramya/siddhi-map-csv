{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-map-csv\n\n\nThe \nsiddhi-map-csv extension\n is an extension to \nSiddhi\n that provides the functionality to convert canonical events of the server in the WSO2Event format to any csv message format and convert events of any csv format to the server's canonical event format (WSO2Event) for processing.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.0.3-SNAPSHOT\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.map.csv\n/groupId\n\n        \nartifactId\nsiddhi-map-csv\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\ncsv\n \n(\n(Sink Mapper)\n)\nThis output mapper extension allows you to convert Siddhi events processed by the WSO2 SP to CSV message before publishing them. You can either use custom placeholder to map a custom CSV message or use pre-defined CSV format where event conversion takes place without extra configurations.\n\n\ncsv\n \n(\n(Source Mapper)\n)\nThis extension is used to convert CSV message to Siddhi event input mapper. You can either receive pre-defined CSV message where event conversion takes place without extra configurations,or receive custom CSV message where a custom place order to map from custom CSV message.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome to WSO2 Siddhi Map CSV"
        }, 
        {
            "location": "/#siddhi-map-csv", 
            "text": "The  siddhi-map-csv extension  is an extension to  Siddhi  that provides the functionality to convert canonical events of the server in the WSO2Event format to any csv message format and convert events of any csv format to the server's canonical event format (WSO2Event) for processing.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-map-csv"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.0.3-SNAPSHOT .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.map.csv /groupId \n         artifactId siddhi-map-csv /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "csv   ( (Sink Mapper) ) This output mapper extension allows you to convert Siddhi events processed by the WSO2 SP to CSV message before publishing them. You can either use custom placeholder to map a custom CSV message or use pre-defined CSV format where event conversion takes place without extra configurations.  csv   ( (Source Mapper) ) This extension is used to convert CSV message to Siddhi event input mapper. You can either receive pre-defined CSV message where event conversion takes place without extra configurations,or receive custom CSV message where a custom place order to map from custom CSV message.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.0.2/", 
            "text": "API Docs - v1.0.2\n\n\nSinkmapper\n\n\ncsv \n(Sink Mapper)\n\n\nThis output mapper extension allows you to convert Siddhi events processed by the WSO2 SP to CSV message before publishing them. You can either use custom placeholder to map a custom CSV message or use pre-defined CSV format where event conversion takes place without extra configurations.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\ncsv\n, delimiter=\nSTRING\n, header=\nBOOL\n, event.grouping.enabled=\nBOOL\n)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndelimiter\n\n        \nThis parameter used to separate the output CSV data, when converting a Siddhi event to CSV format,\n\n        \n,\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader\n\n        \nThis parameter specifies whether the CSV messages will be generated with header or not. If this parameter is set to true, message will be generated with header\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.grouping.enabled\n\n        \nIf this parameter is set to \ntrue\n, events are grouped via a line.separator when multiple events are received. It is required to specify a value for the System.lineSeparator() when the value for this parameter is \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', topic='{{symbol}}', @map(type='csv'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nAbove configuration will perform a default CSV output mapping, which will  generate output as follows:\nWSO2,55.6,100\n\nIf header is true and delimiter is \"-\", then the output will be as follows:\nsymbol-price-volume\n\nWSO2-55.6-100\n\n\n\n\nEXAMPLE 2\n\n\n@sink(type='inMemory', topic='{{symbol}}', @map(type='csv',header='true',delimiter='-',@payload(symbol='0',price='2',volume='1')))define stream BarStream (symbol string, price float,volume long); \n\n\n\n\nAbove configuration will perform a custom CSV mapping. Here, user can add custom place order in the @payload. The place order indicates that where the attribute name's value will be appear in the output message, The output will be produced output as follows:\nWSO2,100,55.6\n\nIf header is true and delimiter is \"-\", then the output will be as follows:\nsymbol-price-volume\n\nWSO2-55.6-100\n\nIf event grouping is enabled, then the output is as follows:\nWSO2-55.6-100System.lineSeparator()\nWSO2-55.6-100System.lineSeparator()\nWSO2-55.6-100System.lineSeparator()\n\n\n\nSourcemapper\n\n\ncsv \n(Source Mapper)\n\n\nThis extension is used to convert CSV message to Siddhi event input mapper. You can either receive pre-defined CSV message where event conversion takes place without extra configurations,or receive custom CSV message where a custom place order to map from custom CSV message.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\ncsv\n, delimiter=\nSTRING\n, header.present=\nBOOL\n, fail.on.unknown.attribute=\nBOOL\n, event.grouping.enabled=\nBOOL\n)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndelimiter\n\n        \nWhen converting a CSV format message to Siddhi event, this parameter indicatesinput CSV message's data should be split by this parameter \n\n        \n,\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.present\n\n        \nWhen converting a CSV format message to Siddhi event, this parameter indicates whether CSV message has header or not. This can either have value true or false.If it's set to \nfalse\n then it indicates that CSV message has't header. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.unknown.attribute\n\n        \nThis parameter specifies how unknown attributes should be handled. If it's set to \ntrue\n and one or more attributes don't havevalues, then SP will drop that message. If this parameter is set to \nfalse\n, the Stream Processor adds the required attribute's values to such events with a null value and the event is converted to a Siddhi event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.grouping.enabled\n\n        \nThis parameter specifies whether event grouping is enabled or not. To receive a group of events together and generate multiple events, this parameter must be set to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', topic='stock', @map(type='csv'))\n define stream FooStream (symbol string, price float, volume int); \n\n\n\n\nAbove configuration will do a default CSV input mapping. Expected input will look like below:\nWSO2 ,55.6 , 100OR\n\"WSO2,No10,Palam Groove Rd,Col-03\" ,55.6 , 100If header.present is true and delimiter is \"-\", then the input is as follows:\nsymbol-price-volumeWSO2-55.6-100\n\n\n\nEXAMPLE 2\n\n\n@source(type='inMemory', topic='stock', @map(type='csv',header='true', @attributes(symbol = \n2\n, price = \n0\n, volume = \n1\n)))\ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\nAbove configuration will perform a custom CSV mapping. Here, user can add place order of each attribute in the @attribute. The place order indicates where the attribute name's value has appeared in the input.Expected input will look like below:\n55.6,100,WSO2\n\nOR55.6,100,\"WSO2,No10,Palm Groove Rd,Col-03\"\n\nIf header is true and delimiter is \"-\", then the output is as follows:\nprice-volume-symbol\n\n55.6-100-WSO2\n\nIf group events is enabled then input should be as follows:\nprice-volume-symbol\n\n55.6-100-WSO2System.lineSeparator()\n55.6-100-IBMSystem.lineSeparator()\n55.6-100-IFSSystem.lineSeparator()", 
            "title": "1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#api-docs-v102", 
            "text": "", 
            "title": "API Docs - v1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/1.0.2/#csv-sink-mapper", 
            "text": "This output mapper extension allows you to convert Siddhi events processed by the WSO2 SP to CSV message before publishing them. You can either use custom placeholder to map a custom CSV message or use pre-defined CSV format where event conversion takes place without extra configurations.  Syntax  @sink(..., @map(type= csv , delimiter= STRING , header= BOOL , event.grouping.enabled= BOOL )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         delimiter \n         This parameter used to separate the output CSV data, when converting a Siddhi event to CSV format, \n         , \n         STRING \n         Yes \n         No \n     \n     \n         header \n         This parameter specifies whether the CSV messages will be generated with header or not. If this parameter is set to true, message will be generated with header \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         event.grouping.enabled \n         If this parameter is set to  true , events are grouped via a line.separator when multiple events are received. It is required to specify a value for the System.lineSeparator() when the value for this parameter is  true . \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', topic='{{symbol}}', @map(type='csv'))\ndefine stream BarStream (symbol string, price float, volume long);  Above configuration will perform a default CSV output mapping, which will  generate output as follows: WSO2,55.6,100 If header is true and delimiter is \"-\", then the output will be as follows: symbol-price-volume WSO2-55.6-100  EXAMPLE 2  @sink(type='inMemory', topic='{{symbol}}', @map(type='csv',header='true',delimiter='-',@payload(symbol='0',price='2',volume='1')))define stream BarStream (symbol string, price float,volume long);   Above configuration will perform a custom CSV mapping. Here, user can add custom place order in the @payload. The place order indicates that where the attribute name's value will be appear in the output message, The output will be produced output as follows: WSO2,100,55.6 If header is true and delimiter is \"-\", then the output will be as follows: symbol-price-volume WSO2-55.6-100 If event grouping is enabled, then the output is as follows: WSO2-55.6-100System.lineSeparator() WSO2-55.6-100System.lineSeparator() WSO2-55.6-100System.lineSeparator()", 
            "title": "csv (Sink Mapper)"
        }, 
        {
            "location": "/api/1.0.2/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/1.0.2/#csv-source-mapper", 
            "text": "This extension is used to convert CSV message to Siddhi event input mapper. You can either receive pre-defined CSV message where event conversion takes place without extra configurations,or receive custom CSV message where a custom place order to map from custom CSV message.  Syntax  @source(..., @map(type= csv , delimiter= STRING , header.present= BOOL , fail.on.unknown.attribute= BOOL , event.grouping.enabled= BOOL )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         delimiter \n         When converting a CSV format message to Siddhi event, this parameter indicatesinput CSV message's data should be split by this parameter  \n         , \n         STRING \n         Yes \n         No \n     \n     \n         header.present \n         When converting a CSV format message to Siddhi event, this parameter indicates whether CSV message has header or not. This can either have value true or false.If it's set to  false  then it indicates that CSV message has't header.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         fail.on.unknown.attribute \n         This parameter specifies how unknown attributes should be handled. If it's set to  true  and one or more attributes don't havevalues, then SP will drop that message. If this parameter is set to  false , the Stream Processor adds the required attribute's values to such events with a null value and the event is converted to a Siddhi event. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         event.grouping.enabled \n         This parameter specifies whether event grouping is enabled or not. To receive a group of events together and generate multiple events, this parameter must be set to  true . \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', topic='stock', @map(type='csv'))\n define stream FooStream (symbol string, price float, volume int);   Above configuration will do a default CSV input mapping. Expected input will look like below: WSO2 ,55.6 , 100OR \"WSO2,No10,Palam Groove Rd,Col-03\" ,55.6 , 100If header.present is true and delimiter is \"-\", then the input is as follows: symbol-price-volumeWSO2-55.6-100  EXAMPLE 2  @source(type='inMemory', topic='stock', @map(type='csv',header='true', @attributes(symbol =  2 , price =  0 , volume =  1 )))\ndefine stream FooStream (symbol string, price float, volume long);   Above configuration will perform a custom CSV mapping. Here, user can add place order of each attribute in the @attribute. The place order indicates where the attribute name's value has appeared in the input.Expected input will look like below: 55.6,100,WSO2 OR55.6,100,\"WSO2,No10,Palm Groove Rd,Col-03\" If header is true and delimiter is \"-\", then the output is as follows: price-volume-symbol 55.6-100-WSO2 If group events is enabled then input should be as follows: price-volume-symbol 55.6-100-WSO2System.lineSeparator() 55.6-100-IBMSystem.lineSeparator() 55.6-100-IFSSystem.lineSeparator()", 
            "title": "csv (Source Mapper)"
        }, 
        {
            "location": "/api/1.0.1/", 
            "text": "API Docs - v1.0.1\n\n\nSinkmapper\n\n\ncsv \n(Sink Mapper)\n\n\nThis output mapper extension allows you to convert Siddhi events processed by the WSO2 SP to CSV message before publishing them. You can either use custom placeholder to map a custom CSV message or use pre-defined CSV format where event conversion takes place without extra configurations.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\ncsv\n, delimiter=\nSTRING\n, header=\nBOOL\n, event.grouping.enabled=\nBOOL\n)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndelimiter\n\n        \nThis parameter used to separate the output CSV data, when converting a Siddhi event to CSV format,\n\n        \n,\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader\n\n        \nThis parameter specifies whether the CSV messages will be generated with header or not. If this parameter is set to true, message will be generated with header\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.grouping.enabled\n\n        \nIf this parameter is set to \ntrue\n, events are grouped via a line.separator when multiple events are received. It is required to specify a value for the System.lineSeparator() when the value for this parameter is \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', topic='{{symbol}}', @map(type='csv'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nAbove configuration will perform a default CSV output mapping, which will  generate output as follows:\nWSO2,55.6,100\n\nIf header is true and delimiter is \"-\", then the output will be as follows:\nsymbol-price-volume\n\nWSO2-55.6-100\n\n\n\n\nEXAMPLE 2\n\n\n@sink(type='inMemory', topic='{{symbol}}', @map(type='csv',header='true',delimiter='-',@payload(symbol='0',price='2',volume='1')))define stream BarStream (symbol string, price float,volume long); \n\n\n\n\nAbove configuration will perform a custom CSV mapping. Here, user can add custom place order in the @payload. The place order indicates that where the attribute name's value will be appear in the output message, The output will be produced output as follows:\nWSO2,100,55.6\n\nIf header is true and delimiter is \"-\", then the output will be as follows:\nsymbol-price-volume\n\nWSO2-55.6-100\n\nIf event grouping is enabled, then the output is as follows:\nWSO2-55.6-100System.lineSeparator()\nWSO2-55.6-100System.lineSeparator()\nWSO2-55.6-100System.lineSeparator()\n\n\n\nSourcemapper\n\n\ncsv \n(Source Mapper)\n\n\nThis extension is used to convert CSV message to Siddhi event input mapper. You can either receive pre-defined CSV message where event conversion takes place without extra configurations,or receive custom CSV message where a custom place order to map from custom CSV message.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\ncsv\n, delimiter=\nSTRING\n, header.present=\nBOOL\n, fail.on.unknown.attribute=\nBOOL\n, event.grouping.enabled=\nBOOL\n)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndelimiter\n\n        \nWhen converting a CSV format message to Siddhi event, this parameter indicatesinput CSV message's data should be split by this parameter \n\n        \n,\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.present\n\n        \nWhen converting a CSV format message to Siddhi event, this parameter indicates whether CSV message has header or not. This can either have value true or false.If it's set to \nfalse\n then it indicates that CSV message has't header. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.unknown.attribute\n\n        \nThis parameter specifies how unknown attributes should be handled. If it's set to \ntrue\n and one or more attributes don't havevalues, then SP will drop that message. If this parameter is set to \nfalse\n, the Stream Processor adds the required attribute's values to such events with a null value and the event is converted to a Siddhi event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.grouping.enabled\n\n        \nThis parameter specifies whether event grouping is enabled or not. To receive a group of events together and generate multiple events, this parameter must be set to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', topic='stock', @map(type='csv'))\n define stream FooStream (symbol string, price float, volume int); \n\n\n\n\nAbove configuration will do a default CSV input mapping. Expected input will look like below:\nWSO2 ,55.6 , 100OR\n\"WSO2,No10,Palam Groove Rd,Col-03\" ,55.6 , 100If header.present is true and delimiter is \"-\", then the input is as follows:\nsymbol-price-volumeWSO2-55.6-100\n\n\n\nEXAMPLE 2\n\n\n@source(type='inMemory', topic='stock', @map(type='csv',header='true', @attributes(symbol = \n2\n, price = \n0\n, volume = \n1\n)))\ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\nAbove configuration will perform a custom CSV mapping. Here, user can add place order of each attribute in the @attribute. The place order indicates where the attribute name's value has appeared in the input.Expected input will look like below:\n55.6,100,WSO2\n\nOR55.6,100,\"WSO2,No10,Palm Groove Rd,Col-03\"\n\nIf header is true and delimiter is \"-\", then the output is as follows:\nprice-volume-symbol\n\n55.6-100-WSO2\n\nIf group events is enabled then input should be as follows:\nprice-volume-symbol\n\n55.6-100-WSO2System.lineSeparator()\n55.6-100-IBMSystem.lineSeparator()\n55.6-100-IFSSystem.lineSeparator()", 
            "title": "1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#api-docs-v101", 
            "text": "", 
            "title": "API Docs - v1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/1.0.1/#csv-sink-mapper", 
            "text": "This output mapper extension allows you to convert Siddhi events processed by the WSO2 SP to CSV message before publishing them. You can either use custom placeholder to map a custom CSV message or use pre-defined CSV format where event conversion takes place without extra configurations.  Syntax  @sink(..., @map(type= csv , delimiter= STRING , header= BOOL , event.grouping.enabled= BOOL )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         delimiter \n         This parameter used to separate the output CSV data, when converting a Siddhi event to CSV format, \n         , \n         STRING \n         Yes \n         No \n     \n     \n         header \n         This parameter specifies whether the CSV messages will be generated with header or not. If this parameter is set to true, message will be generated with header \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         event.grouping.enabled \n         If this parameter is set to  true , events are grouped via a line.separator when multiple events are received. It is required to specify a value for the System.lineSeparator() when the value for this parameter is  true . \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', topic='{{symbol}}', @map(type='csv'))\ndefine stream BarStream (symbol string, price float, volume long);  Above configuration will perform a default CSV output mapping, which will  generate output as follows: WSO2,55.6,100 If header is true and delimiter is \"-\", then the output will be as follows: symbol-price-volume WSO2-55.6-100  EXAMPLE 2  @sink(type='inMemory', topic='{{symbol}}', @map(type='csv',header='true',delimiter='-',@payload(symbol='0',price='2',volume='1')))define stream BarStream (symbol string, price float,volume long);   Above configuration will perform a custom CSV mapping. Here, user can add custom place order in the @payload. The place order indicates that where the attribute name's value will be appear in the output message, The output will be produced output as follows: WSO2,100,55.6 If header is true and delimiter is \"-\", then the output will be as follows: symbol-price-volume WSO2-55.6-100 If event grouping is enabled, then the output is as follows: WSO2-55.6-100System.lineSeparator() WSO2-55.6-100System.lineSeparator() WSO2-55.6-100System.lineSeparator()", 
            "title": "csv (Sink Mapper)"
        }, 
        {
            "location": "/api/1.0.1/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/1.0.1/#csv-source-mapper", 
            "text": "This extension is used to convert CSV message to Siddhi event input mapper. You can either receive pre-defined CSV message where event conversion takes place without extra configurations,or receive custom CSV message where a custom place order to map from custom CSV message.  Syntax  @source(..., @map(type= csv , delimiter= STRING , header.present= BOOL , fail.on.unknown.attribute= BOOL , event.grouping.enabled= BOOL )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         delimiter \n         When converting a CSV format message to Siddhi event, this parameter indicatesinput CSV message's data should be split by this parameter  \n         , \n         STRING \n         Yes \n         No \n     \n     \n         header.present \n         When converting a CSV format message to Siddhi event, this parameter indicates whether CSV message has header or not. This can either have value true or false.If it's set to  false  then it indicates that CSV message has't header.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         fail.on.unknown.attribute \n         This parameter specifies how unknown attributes should be handled. If it's set to  true  and one or more attributes don't havevalues, then SP will drop that message. If this parameter is set to  false , the Stream Processor adds the required attribute's values to such events with a null value and the event is converted to a Siddhi event. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         event.grouping.enabled \n         This parameter specifies whether event grouping is enabled or not. To receive a group of events together and generate multiple events, this parameter must be set to  true . \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', topic='stock', @map(type='csv'))\n define stream FooStream (symbol string, price float, volume int);   Above configuration will do a default CSV input mapping. Expected input will look like below: WSO2 ,55.6 , 100OR \"WSO2,No10,Palam Groove Rd,Col-03\" ,55.6 , 100If header.present is true and delimiter is \"-\", then the input is as follows: symbol-price-volumeWSO2-55.6-100  EXAMPLE 2  @source(type='inMemory', topic='stock', @map(type='csv',header='true', @attributes(symbol =  2 , price =  0 , volume =  1 )))\ndefine stream FooStream (symbol string, price float, volume long);   Above configuration will perform a custom CSV mapping. Here, user can add place order of each attribute in the @attribute. The place order indicates where the attribute name's value has appeared in the input.Expected input will look like below: 55.6,100,WSO2 OR55.6,100,\"WSO2,No10,Palm Groove Rd,Col-03\" If header is true and delimiter is \"-\", then the output is as follows: price-volume-symbol 55.6-100-WSO2 If group events is enabled then input should be as follows: price-volume-symbol 55.6-100-WSO2System.lineSeparator() 55.6-100-IBMSystem.lineSeparator() 55.6-100-IFSSystem.lineSeparator()", 
            "title": "csv (Source Mapper)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v1.0.3-SNAPSHOT\n\n\nSinkmapper\n\n\ncsv \n(Sink Mapper)\n\n\nThis output mapper extension allows you to convert Siddhi events processed by the WSO2 SP to CSV message before publishing them. You can either use custom placeholder to map a custom CSV message or use pre-defined CSV format where event conversion takes place without extra configurations.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\ncsv\n, delimiter=\nSTRING\n, header=\nBOOL\n, event.grouping.enabled=\nBOOL\n)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndelimiter\n\n        \nThis parameter used to separate the output CSV data, when converting a Siddhi event to CSV format,\n\n        \n,\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader\n\n        \nThis parameter specifies whether the CSV messages will be generated with header or not. If this parameter is set to true, message will be generated with header\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.grouping.enabled\n\n        \nIf this parameter is set to \ntrue\n, events are grouped via a line.separator when multiple events are received. It is required to specify a value for the System.lineSeparator() when the value for this parameter is \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', topic='{{symbol}}', @map(type='csv'))\ndefine stream BarStream (symbol string, price float, volume long);\n\n\n\n\nAbove configuration will perform a default CSV output mapping, which will  generate output as follows:\nWSO2,55.6,100\n\nIf header is true and delimiter is \"-\", then the output will be as follows:\nsymbol-price-volume\n\nWSO2-55.6-100\n\n\n\n\nEXAMPLE 2\n\n\n@sink(type='inMemory', topic='{{symbol}}', @map(type='csv',header='true',delimiter='-',@payload(symbol='0',price='2',volume='1')))define stream BarStream (symbol string, price float,volume long); \n\n\n\n\nAbove configuration will perform a custom CSV mapping. Here, user can add custom place order in the @payload. The place order indicates that where the attribute name's value will be appear in the output message, The output will be produced output as follows:\nWSO2,100,55.6\n\nIf header is true and delimiter is \"-\", then the output will be as follows:\nsymbol-price-volume\n\nWSO2-55.6-100\n\nIf event grouping is enabled, then the output is as follows:\nWSO2-55.6-100System.lineSeparator()\nWSO2-55.6-100System.lineSeparator()\nWSO2-55.6-100System.lineSeparator()\n\n\n\nSourcemapper\n\n\ncsv \n(Source Mapper)\n\n\nThis extension is used to convert CSV message to Siddhi event input mapper. You can either receive pre-defined CSV message where event conversion takes place without extra configurations,or receive custom CSV message where a custom place order to map from custom CSV message.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\ncsv\n, delimiter=\nSTRING\n, header.present=\nBOOL\n, fail.on.unknown.attribute=\nBOOL\n, event.grouping.enabled=\nBOOL\n)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \ndelimiter\n\n        \nWhen converting a CSV format message to Siddhi event, this parameter indicatesinput CSV message's data should be split by this parameter \n\n        \n,\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nheader.present\n\n        \nWhen converting a CSV format message to Siddhi event, this parameter indicates whether CSV message has header or not. This can either have value true or false.If it's set to \nfalse\n then it indicates that CSV message has't header. \n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.unknown.attribute\n\n        \nThis parameter specifies how unknown attributes should be handled. If it's set to \ntrue\n and one or more attributes don't havevalues, then SP will drop that message. If this parameter is set to \nfalse\n, the Stream Processor adds the required attribute's values to such events with a null value and the event is converted to a Siddhi event.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.grouping.enabled\n\n        \nThis parameter specifies whether event grouping is enabled or not. To receive a group of events together and generate multiple events, this parameter must be set to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', topic='stock', @map(type='csv'))\n define stream FooStream (symbol string, price float, volume int); \n\n\n\n\nAbove configuration will do a default CSV input mapping. Expected input will look like below:\nWSO2 ,55.6 , 100OR\n\"WSO2,No10,Palam Groove Rd,Col-03\" ,55.6 , 100If header.present is true and delimiter is \"-\", then the input is as follows:\nsymbol-price-volumeWSO2-55.6-100\n\n\n\nEXAMPLE 2\n\n\n@source(type='inMemory', topic='stock', @map(type='csv',header='true', @attributes(symbol = \n2\n, price = \n0\n, volume = \n1\n)))\ndefine stream FooStream (symbol string, price float, volume long); \n\n\n\n\nAbove configuration will perform a custom CSV mapping. Here, user can add place order of each attribute in the @attribute. The place order indicates where the attribute name's value has appeared in the input.Expected input will look like below:\n55.6,100,WSO2\n\nOR55.6,100,\"WSO2,No10,Palm Groove Rd,Col-03\"\n\nIf header is true and delimiter is \"-\", then the output is as follows:\nprice-volume-symbol\n\n55.6-100-WSO2\n\nIf group events is enabled then input should be as follows:\nprice-volume-symbol\n\n55.6-100-WSO2System.lineSeparator()\n55.6-100-IBMSystem.lineSeparator()\n55.6-100-IFSSystem.lineSeparator()", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v103-snapshot", 
            "text": "", 
            "title": "API Docs - v1.0.3-SNAPSHOT"
        }, 
        {
            "location": "/api/latest/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/latest/#csv-sink-mapper", 
            "text": "This output mapper extension allows you to convert Siddhi events processed by the WSO2 SP to CSV message before publishing them. You can either use custom placeholder to map a custom CSV message or use pre-defined CSV format where event conversion takes place without extra configurations.  Syntax  @sink(..., @map(type= csv , delimiter= STRING , header= BOOL , event.grouping.enabled= BOOL )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         delimiter \n         This parameter used to separate the output CSV data, when converting a Siddhi event to CSV format, \n         , \n         STRING \n         Yes \n         No \n     \n     \n         header \n         This parameter specifies whether the CSV messages will be generated with header or not. If this parameter is set to true, message will be generated with header \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         event.grouping.enabled \n         If this parameter is set to  true , events are grouped via a line.separator when multiple events are received. It is required to specify a value for the System.lineSeparator() when the value for this parameter is  true . \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', topic='{{symbol}}', @map(type='csv'))\ndefine stream BarStream (symbol string, price float, volume long);  Above configuration will perform a default CSV output mapping, which will  generate output as follows: WSO2,55.6,100 If header is true and delimiter is \"-\", then the output will be as follows: symbol-price-volume WSO2-55.6-100  EXAMPLE 2  @sink(type='inMemory', topic='{{symbol}}', @map(type='csv',header='true',delimiter='-',@payload(symbol='0',price='2',volume='1')))define stream BarStream (symbol string, price float,volume long);   Above configuration will perform a custom CSV mapping. Here, user can add custom place order in the @payload. The place order indicates that where the attribute name's value will be appear in the output message, The output will be produced output as follows: WSO2,100,55.6 If header is true and delimiter is \"-\", then the output will be as follows: symbol-price-volume WSO2-55.6-100 If event grouping is enabled, then the output is as follows: WSO2-55.6-100System.lineSeparator() WSO2-55.6-100System.lineSeparator() WSO2-55.6-100System.lineSeparator()", 
            "title": "csv (Sink Mapper)"
        }, 
        {
            "location": "/api/latest/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/latest/#csv-source-mapper", 
            "text": "This extension is used to convert CSV message to Siddhi event input mapper. You can either receive pre-defined CSV message where event conversion takes place without extra configurations,or receive custom CSV message where a custom place order to map from custom CSV message.  Syntax  @source(..., @map(type= csv , delimiter= STRING , header.present= BOOL , fail.on.unknown.attribute= BOOL , event.grouping.enabled= BOOL )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         delimiter \n         When converting a CSV format message to Siddhi event, this parameter indicatesinput CSV message's data should be split by this parameter  \n         , \n         STRING \n         Yes \n         No \n     \n     \n         header.present \n         When converting a CSV format message to Siddhi event, this parameter indicates whether CSV message has header or not. This can either have value true or false.If it's set to  false  then it indicates that CSV message has't header.  \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         fail.on.unknown.attribute \n         This parameter specifies how unknown attributes should be handled. If it's set to  true  and one or more attributes don't havevalues, then SP will drop that message. If this parameter is set to  false , the Stream Processor adds the required attribute's values to such events with a null value and the event is converted to a Siddhi event. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         event.grouping.enabled \n         This parameter specifies whether event grouping is enabled or not. To receive a group of events together and generate multiple events, this parameter must be set to  true . \n         false \n         BOOL \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', topic='stock', @map(type='csv'))\n define stream FooStream (symbol string, price float, volume int);   Above configuration will do a default CSV input mapping. Expected input will look like below: WSO2 ,55.6 , 100OR \"WSO2,No10,Palam Groove Rd,Col-03\" ,55.6 , 100If header.present is true and delimiter is \"-\", then the input is as follows: symbol-price-volumeWSO2-55.6-100  EXAMPLE 2  @source(type='inMemory', topic='stock', @map(type='csv',header='true', @attributes(symbol =  2 , price =  0 , volume =  1 )))\ndefine stream FooStream (symbol string, price float, volume long);   Above configuration will perform a custom CSV mapping. Here, user can add place order of each attribute in the @attribute. The place order indicates where the attribute name's value has appeared in the input.Expected input will look like below: 55.6,100,WSO2 OR55.6,100,\"WSO2,No10,Palm Groove Rd,Col-03\" If header is true and delimiter is \"-\", then the output is as follows: price-volume-symbol 55.6-100-WSO2 If group events is enabled then input should be as follows: price-volume-symbol 55.6-100-WSO2System.lineSeparator() 55.6-100-IBMSystem.lineSeparator() 55.6-100-IFSSystem.lineSeparator()", 
            "title": "csv (Source Mapper)"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}